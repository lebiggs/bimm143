---
title: "Class 05: Data Visualization with GGPLOT"
author: "Laura Biggs"
format: html
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

# Our first ggplot

Install ggplot2 w/install.packages('ggplot2') Render in package w/library(ggplot2)

```{r}
#install.packages('ggplot2')
library(ggplot2)
```

Cars plots from Q6

```{r}
# Load in cars data
head(cars)

# Create cars ggplot w/ ggplot, aes, geom_point
# geom_smooth creates thin trendline w/o SD
# Add labels with labs function
# Theme_bw created black and white theme
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth(method = 'lm', se=FALSE) +
  labs(title="Speed and Stopping Distances of Cars", 
       x="Speed (MPH)",
       y="Stopping Distance (ft)",
       subtitle="Cars Dataset",
       caption ="Dataset: cars") +
  theme_bw()
```

Genes plot from Q6

```{r}
# Load in data
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)

# First 6 genes in the dataframe
head(genes)

#How many rows in the df
nrow(genes)

#How many columns in the df
ncol(genes)
colnames(genes)

#Stratify the table by levels of regulation
#Remember the $ sign isolates the selected column
table(genes$State)

#What fraction of total genes are upregulated (to the 2nd decimal point)?
round(table(genes$State)/nrow(genes) * 100, 2)

#Make ggplot w/condition 1 and 2
#x and y are NOT in string format; no spaces between characters allowed
ggplot(genes) +
  aes(x=Condition1, y=Condition2) +
  geom_point()

#Assign as p and add color according to the state
ggplot(genes) +
      aes(x=Condition1, y=Condition2, col=State) +
      geom_point()

#Change the color to blue, grey, and red
ggplot(genes) +
      aes(x=Condition1, y=Condition2, col=State) +        
      geom_point() +
      scale_color_manual(values=c("blue", "grey", "red"))

#Add plot labels; x and y titles are STRINGS
p <- ggplot(genes) +
      aes(x=Condition1, y=Condition2, col=State) +     
      geom_point() +
      scale_color_manual(values=c("blue", "grey", "red")) +
      labs(title = 'Gene Expression Changes Upon Drug Treatment',
           x='Control (no drug)', 
           y='Drug Treatment')
p
```

Gapminder Extension (Partially completed)

```{r}
#Install gapminder url
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
```

```{r}
#Install dplyr
#install.packages("dplyr")
library(dplyr)
library(ggplot2)

#Filter on the year 2007
gapminder_2007 <- gapminder %>% filter(year==2007)

#Make ggplot with GDP and life expectancy
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point()
```
